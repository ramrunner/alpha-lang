bt
print tmpOp
make
r
b breakP
c
n
n
c
n
c
n
print this->instructionMem
print this->instructionMem[0]
print this->instructionMem[0]->getOperands()
n
print tmpOp
make
r
delete
r
bt
b breakC
run
n
n
n
b breakP
delete breakC
delete 1
delete 0
ru
c
c
c
n
ptype this->instructionMem
ptype this->instructionMem[0]
ptype instructionMem
ptype instructionMem[]
ptype instructionMem[0]
ptype instructionMem.operator[](0)
ptype instructionMem[0L]
make
delete
b breakP
r
n
print tmpIns
n
print tmpIns
print tmpIns->getOperands
print tmpIns->getOperands()
print tmpIns->getOperands(0)
print tmpIns->getOperands()
quit
set arg ../assign.abc 
make
make clean
make
r
bt
b brealP
b breakP
r
n
n
n
print tmpIns
print tmpIns->getOperands
print tmpIns->getOperands()
call tmpIns->getOperands
print
print $3
call tmpIns->getOperands()
help call
call tmpIns->getOperands()
n
print tmpOp
quit
set arg ../assign.abc 
b breakP
ru
n
print tmpIns
print instructionMem[j]
n
print tmpIns
n
print tmpOp
print tmpIns->getOperands()
print tmpIns->getOperands
n
n
n
print k
print tmpOp
print tmpOp[1]
make
r
n
n
print tmpOp
n
print tmpOp
n
n
n
quit
set arg ../assign.abc 
r
bt
make
r
bt
print this->memStack
print memStack.size()
call memStack.size()
call MEM::memStack.size()
make
b breakE
b breakE
quit
set arg ../assign.abc 
b breakE
r
n
print this->top
print this->memStack
make
r
n
print this->memStack
make
r
b breakE
r
make
b breakE
r
delete
make
b breakE
r
n
n
print j
n
print this->top
n
make
r
n
print j
print top
n
n
n
n
q
set arg ../test1.abc 
r
n
bt
make
r
print memcellp
make
r
quit
set arg ../assign.abc 
b breakD
r
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
quit
set arg ../assign.abc 
run
bt
print memcellp
print memcellp->type
make
r
maker
make
r
quit
set arg ../assign.abc
r
bt
make
r
quit
set args ../func.abc
r
bt
quit
set args ../func.abc
r
quit
set args ../func.abc
r
bt
quit
set args ../func.abc
r
bt
print memcellp
print 0x400980
ptype 0x400980
print 0x400980->data
type
help
help data
quit
set args ../func.abc 
r
bt
make
make
r
bt
quit
set args ../func.abc 
b breakD
quit
set args ../func.abc 
q
set args ../func.abc 
b breakD
r
n
print op[0]
print op
s
n
print op
print op.operator[](0)
quit
quit
